// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Close button should be rendered correctly on Android 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <View
    flatListProps={
      Object {
        "windowSize": 3,
      }
    }
    imageComponent={[Function]}
    images={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    initialListSize={10}
    initialPage={0}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPageScrollStateChanged={[Function]}
    onPageSelected={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pageDataArray={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    pageMargin={0}
    removeClippedSubviews={true}
    renderPage={[Function]}
    scrollEnabled={false}
    scrollViewStyle={Object {}}
    style={
      Array [
        Object {
          "backgroundColor": "black",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      contentOffset={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      data={
        Array [
          Object {
            "source": Object {
              "uri": "fake_image_url",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {},
        ]
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={3}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            enableResistance={true}
            enableScale={true}
            enableTransform={false}
            enableTranslate={true}
            maxOverScrollDistance={20}
            maxScale={1}
            onLayout={[Function]}
            onTransformGestureReleased={[Function]}
            onViewTransformed={[Function]}
            style={
              Object {
                "height": 1334,
                "position": "relative",
                "width": 750,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateY": 0,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "overflow": "hidden",
                    },
                    Object {
                      "height": 1334,
                      "width": 750,
                    },
                  ]
                }
              >
                <FastImageView
                  accessibilityLabel="fake_alt_description"
                  accessibilityRole="image"
                  onFastImageError={[Function]}
                  onFastImageLoad={[Function]}
                  onFastImageLoadStart={[Function]}
                  resizeMode="contain"
                  source={
                    Object {
                      "priority": "normal",
                      "uri": "fake_image_url",
                    }
                  }
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    }
                  }
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "height": 32,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "top": 20,
        "width": 32,
      }
    }
  >
    <Text
      accessibilityLabel="Close"
      accessibilityRole="imagebutton"
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "white",
            "fontSize": 30,
          },
          undefined,
          Object {
            "fontFamily": "Material Design Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…–
    </Text>
  </View>
  <View
    style={
      Object {
        "bottom": 20,
        "left": 20,
        "position": "absolute",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 10,
        }
      }
    >
      Photographer
    </Text>
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 24,
          "fontWeight": "bold",
        }
      }
    >
      John Doe
    </Text>
  </View>
</RCTSafeAreaView>
`;

exports[`Close button should be rendered correctly on iOS 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <View
    flatListProps={
      Object {
        "windowSize": 3,
      }
    }
    imageComponent={[Function]}
    images={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    initialListSize={10}
    initialPage={0}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPageScrollStateChanged={[Function]}
    onPageSelected={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pageDataArray={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    pageMargin={0}
    removeClippedSubviews={true}
    renderPage={[Function]}
    scrollEnabled={false}
    scrollViewStyle={Object {}}
    style={
      Array [
        Object {
          "backgroundColor": "black",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      contentOffset={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      data={
        Array [
          Object {
            "source": Object {
              "uri": "fake_image_url",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {},
        ]
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={3}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            enableResistance={true}
            enableScale={true}
            enableTransform={false}
            enableTranslate={true}
            maxOverScrollDistance={20}
            maxScale={1}
            onLayout={[Function]}
            onTransformGestureReleased={[Function]}
            onViewTransformed={[Function]}
            style={
              Object {
                "height": 1334,
                "position": "relative",
                "width": 750,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateY": 0,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "overflow": "hidden",
                    },
                    Object {
                      "height": 1334,
                      "width": 750,
                    },
                  ]
                }
              >
                <FastImageView
                  accessibilityLabel="fake_alt_description"
                  accessibilityRole="image"
                  onFastImageError={[Function]}
                  onFastImageLoad={[Function]}
                  onFastImageLoadStart={[Function]}
                  resizeMode="contain"
                  source={
                    Object {
                      "priority": "normal",
                      "uri": "fake_image_url",
                    }
                  }
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    }
                  }
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "height": 32,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "top": 40,
        "width": 32,
      }
    }
  >
    <Text
      accessibilityLabel="Close"
      accessibilityRole="imagebutton"
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "white",
            "fontSize": 30,
          },
          undefined,
          Object {
            "fontFamily": "Material Design Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…–
    </Text>
  </View>
  <View
    style={
      Object {
        "bottom": 40,
        "left": 20,
        "position": "absolute",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 10,
        }
      }
    >
      Photographer
    </Text>
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 24,
          "fontWeight": "bold",
        }
      }
    >
      John Doe
    </Text>
  </View>
</RCTSafeAreaView>
`;

exports[`Gallery should show an activitiy indicator only when loading the image 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <View
    flatListProps={
      Object {
        "windowSize": 3,
      }
    }
    imageComponent={[Function]}
    images={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    initialListSize={10}
    initialPage={0}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPageScrollStateChanged={[Function]}
    onPageSelected={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pageDataArray={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    pageMargin={0}
    removeClippedSubviews={true}
    renderPage={[Function]}
    scrollEnabled={false}
    scrollViewStyle={Object {}}
    style={
      Array [
        Object {
          "backgroundColor": "black",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      contentOffset={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      data={
        Array [
          Object {
            "source": Object {
              "uri": "fake_image_url",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {},
        ]
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={3}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            enableResistance={true}
            enableScale={true}
            enableTransform={false}
            enableTranslate={true}
            maxOverScrollDistance={20}
            maxScale={1}
            onLayout={[Function]}
            onTransformGestureReleased={[Function]}
            onViewTransformed={[Function]}
            style={
              Object {
                "height": 1334,
                "position": "relative",
                "width": 750,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateY": 0,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "overflow": "hidden",
                    },
                    Object {
                      "height": 1334,
                      "width": 750,
                    },
                  ]
                }
              >
                <FastImageView
                  accessibilityLabel="fake_alt_description"
                  accessibilityRole="image"
                  onFastImageError={[Function]}
                  onFastImageLoad={[Function]}
                  onFastImageLoadStart={[Function]}
                  resizeMode="contain"
                  source={
                    Object {
                      "priority": "normal",
                      "uri": "fake_image_url",
                    }
                  }
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    }
                  }
                />
              </View>
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "height": 1334,
                    "justifyContent": "center",
                    "position": "absolute",
                    "width": 750,
                  }
                }
              >
                <ActivityIndicator
                  accessibilityRole="progressbar"
                  animating={true}
                  color="white"
                  hidesWhenStopped={true}
                  size="large"
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "height": 32,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "top": 40,
        "width": 32,
      }
    }
  >
    <Text
      accessibilityLabel="Close"
      accessibilityRole="imagebutton"
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "white",
            "fontSize": 30,
          },
          undefined,
          Object {
            "fontFamily": "Material Design Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…–
    </Text>
  </View>
  <View
    style={
      Object {
        "bottom": 40,
        "left": 20,
        "position": "absolute",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 10,
        }
      }
    >
      Photographer
    </Text>
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 24,
          "fontWeight": "bold",
        }
      }
    >
      John Doe
    </Text>
  </View>
</RCTSafeAreaView>
`;

exports[`Gallery should show an activitiy indicator only when loading the image 2`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <View
    flatListProps={
      Object {
        "windowSize": 3,
      }
    }
    imageComponent={[Function]}
    images={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    initialListSize={10}
    initialPage={0}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPageScrollStateChanged={[Function]}
    onPageSelected={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pageDataArray={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    pageMargin={0}
    removeClippedSubviews={true}
    renderPage={[Function]}
    scrollEnabled={false}
    scrollViewStyle={Object {}}
    style={
      Array [
        Object {
          "backgroundColor": "black",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      contentOffset={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      data={
        Array [
          Object {
            "source": Object {
              "uri": "fake_image_url",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {},
        ]
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={3}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            enableResistance={true}
            enableScale={true}
            enableTransform={false}
            enableTranslate={true}
            maxOverScrollDistance={20}
            maxScale={1}
            onLayout={[Function]}
            onTransformGestureReleased={[Function]}
            onViewTransformed={[Function]}
            style={
              Object {
                "height": 1334,
                "position": "relative",
                "width": 750,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateY": 0,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "overflow": "hidden",
                    },
                    Object {
                      "height": 1334,
                      "width": 750,
                    },
                  ]
                }
              >
                <FastImageView
                  accessibilityLabel="fake_alt_description"
                  accessibilityRole="image"
                  onFastImageError={[Function]}
                  onFastImageLoad={[Function]}
                  onFastImageLoadStart={[Function]}
                  resizeMode="contain"
                  source={
                    Object {
                      "priority": "normal",
                      "uri": "fake_image_url",
                    }
                  }
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    }
                  }
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "height": 32,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "top": 40,
        "width": 32,
      }
    }
  >
    <Text
      accessibilityLabel="Close"
      accessibilityRole="imagebutton"
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "white",
            "fontSize": 30,
          },
          undefined,
          Object {
            "fontFamily": "Material Design Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…–
    </Text>
  </View>
  <View
    style={
      Object {
        "bottom": 40,
        "left": 20,
        "position": "absolute",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 10,
        }
      }
    >
      Photographer
    </Text>
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 24,
          "fontWeight": "bold",
        }
      }
    >
      John Doe
    </Text>
  </View>
</RCTSafeAreaView>
`;

exports[`Gallery should show an activitiy indicator only when loading the image 3`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <View
    flatListProps={
      Object {
        "windowSize": 3,
      }
    }
    imageComponent={[Function]}
    images={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    initialListSize={10}
    initialPage={0}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPageScrollStateChanged={[Function]}
    onPageSelected={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pageDataArray={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    pageMargin={0}
    removeClippedSubviews={true}
    renderPage={[Function]}
    scrollEnabled={false}
    scrollViewStyle={Object {}}
    style={
      Array [
        Object {
          "backgroundColor": "black",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      contentOffset={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      data={
        Array [
          Object {
            "source": Object {
              "uri": "fake_image_url",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {},
        ]
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={3}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            enableResistance={true}
            enableScale={true}
            enableTransform={false}
            enableTranslate={true}
            maxOverScrollDistance={20}
            maxScale={1}
            onLayout={[Function]}
            onTransformGestureReleased={[Function]}
            onViewTransformed={[Function]}
            style={
              Object {
                "height": 1334,
                "position": "relative",
                "width": 750,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateY": 0,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "overflow": "hidden",
                    },
                    Object {
                      "height": 1334,
                      "width": 750,
                    },
                  ]
                }
              >
                <FastImageView
                  accessibilityLabel="fake_alt_description"
                  accessibilityRole="image"
                  onFastImageError={[Function]}
                  onFastImageLoad={[Function]}
                  onFastImageLoadStart={[Function]}
                  resizeMode="contain"
                  source={
                    Object {
                      "priority": "normal",
                      "uri": "fake_image_url",
                    }
                  }
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    }
                  }
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "height": 32,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "top": 40,
        "width": 32,
      }
    }
  >
    <Text
      accessibilityLabel="Close"
      accessibilityRole="imagebutton"
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "white",
            "fontSize": 30,
          },
          undefined,
          Object {
            "fontFamily": "Material Design Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…–
    </Text>
  </View>
  <View
    style={
      Object {
        "bottom": 40,
        "left": 20,
        "position": "absolute",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 10,
        }
      }
    >
      Photographer
    </Text>
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 24,
          "fontWeight": "bold",
        }
      }
    >
      John Doe
    </Text>
  </View>
</RCTSafeAreaView>
`;

exports[`Gallery should show the photographer's name correcly on Android 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <View
    flatListProps={
      Object {
        "windowSize": 3,
      }
    }
    imageComponent={[Function]}
    images={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    initialListSize={10}
    initialPage={0}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPageScrollStateChanged={[Function]}
    onPageSelected={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pageDataArray={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    pageMargin={0}
    removeClippedSubviews={true}
    renderPage={[Function]}
    scrollEnabled={false}
    scrollViewStyle={Object {}}
    style={
      Array [
        Object {
          "backgroundColor": "black",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      contentOffset={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      data={
        Array [
          Object {
            "source": Object {
              "uri": "fake_image_url",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {},
        ]
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={3}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            enableResistance={true}
            enableScale={true}
            enableTransform={false}
            enableTranslate={true}
            maxOverScrollDistance={20}
            maxScale={1}
            onLayout={[Function]}
            onTransformGestureReleased={[Function]}
            onViewTransformed={[Function]}
            style={
              Object {
                "height": 1334,
                "position": "relative",
                "width": 750,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateY": 0,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "overflow": "hidden",
                    },
                    Object {
                      "height": 1334,
                      "width": 750,
                    },
                  ]
                }
              >
                <FastImageView
                  accessibilityLabel="fake_alt_description"
                  accessibilityRole="image"
                  onFastImageError={[Function]}
                  onFastImageLoad={[Function]}
                  onFastImageLoadStart={[Function]}
                  resizeMode="contain"
                  source={
                    Object {
                      "priority": "normal",
                      "uri": "fake_image_url",
                    }
                  }
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    }
                  }
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "height": 32,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "top": 20,
        "width": 32,
      }
    }
  >
    <Text
      accessibilityLabel="Close"
      accessibilityRole="imagebutton"
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "white",
            "fontSize": 30,
          },
          undefined,
          Object {
            "fontFamily": "Material Design Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…–
    </Text>
  </View>
  <View
    style={
      Object {
        "bottom": 20,
        "left": 20,
        "position": "absolute",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 10,
        }
      }
    >
      Photographer
    </Text>
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 24,
          "fontWeight": "bold",
        }
      }
    >
      John Doe
    </Text>
  </View>
</RCTSafeAreaView>
`;

exports[`Gallery should show the photographer's name correcly on iOS 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <View
    flatListProps={
      Object {
        "windowSize": 3,
      }
    }
    imageComponent={[Function]}
    images={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    initialListSize={10}
    initialPage={0}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPageScrollStateChanged={[Function]}
    onPageSelected={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pageDataArray={
      Array [
        Object {
          "source": Object {
            "uri": "fake_image_url",
          },
        },
      ]
    }
    pageMargin={0}
    removeClippedSubviews={true}
    renderPage={[Function]}
    scrollEnabled={false}
    scrollViewStyle={Object {}}
    style={
      Array [
        Object {
          "backgroundColor": "black",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      contentOffset={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      data={
        Array [
          Object {
            "source": Object {
              "uri": "fake_image_url",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {},
        ]
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={3}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            enableResistance={true}
            enableScale={true}
            enableTransform={false}
            enableTranslate={true}
            maxOverScrollDistance={20}
            maxScale={1}
            onLayout={[Function]}
            onTransformGestureReleased={[Function]}
            onViewTransformed={[Function]}
            style={
              Object {
                "height": 1334,
                "position": "relative",
                "width": 750,
              }
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateY": 0,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "overflow": "hidden",
                    },
                    Object {
                      "height": 1334,
                      "width": 750,
                    },
                  ]
                }
              >
                <FastImageView
                  accessibilityLabel="fake_alt_description"
                  accessibilityRole="image"
                  onFastImageError={[Function]}
                  onFastImageLoad={[Function]}
                  onFastImageLoadStart={[Function]}
                  resizeMode="contain"
                  source={
                    Object {
                      "priority": "normal",
                      "uri": "fake_image_url",
                    }
                  }
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    }
                  }
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "height": 32,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "top": 40,
        "width": 32,
      }
    }
  >
    <Text
      accessibilityLabel="Close"
      accessibilityRole="imagebutton"
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "white",
            "fontSize": 30,
          },
          undefined,
          Object {
            "fontFamily": "Material Design Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…–
    </Text>
  </View>
  <View
    style={
      Object {
        "bottom": 40,
        "left": 20,
        "position": "absolute",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 10,
        }
      }
    >
      Photographer
    </Text>
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 24,
          "fontWeight": "bold",
        }
      }
    >
      John Doe
    </Text>
  </View>
</RCTSafeAreaView>
`;
